# Define settings for Single-Sign-On with OAuth2; this means that we need to relay the OAuth token
# to the subsequent resources that are proxied by the Zuul api gateway.

# The home definition tells us to allow anonymous access (secure: false) to the static resources that
# are accessed through the Zuul proxy.

# Remaining properties are used by the OAuth2 SSO to determine where the authorization server is and
# what client crendentials to use to access that server.
# Logging settings.
logging:

  # The default level of all loggers. Can be OFF, ERROR, WARN, INFO, DEBUG, TRACE, or ALL.
  level: 
    com.transoft.completeair.apigateway: DEBUG
  # Logger-specific levels.
  loggers:
    # Redirects SQL logs to a separate file
    org.hibernate.SQL: DEBUG
    org.springframework.web: DEBUG

# Define the port where the API gateway server would be running
server:
  port: 8765
# config data bases
spring:
  # config Rabbitmq
  cloud:
    stream:
      #bindings:
      binders:
        rabbit1:
          type: rabbit
          environment:
            spring:
              rabbitmq:
                host: rabbitmq.train.air.c.transoft.bo #192.168.109.34
                port: 5672
                username: admin
                password: admin
# config Api Gateway Oauth 
serviceOauth:
  login: http://oauth-service/uaa/oauth/token?client_id=
  refresh: http://oauth-service/uaa/oauth/token?grant_type=refresh_token&refresh_token=
  logout: http://oauth-service/uaa/api/logout-up
  account: http://oauth-service/uaa/api/account
  errorOauth: http://erroauth.train.air.c.transoft.bo:${server.port} #update ip public 172.16.0.176
#spring.mvc.dispatch-options-request=true
# Define the routes which determine what URL are serviced by what applications.
# The application/services are defined in the bootstrap.yml file of individual applications
# using the spring.application.name property.

# Note that we don't proxy the calls to the authorization server. The reason being that
# Spring cloud security would need to secure the api gateway before it can route the
# requests using zuul
#zuul.host.connect-timeout-millis: 60000
#zuul.host.socket-timeout-millis: 60000
#zuul:
  #host:
    #connect-timeout-millis: 5000
    #socket-timeout-millis: 10000
#
#hystrix:
  #command:
    #default:
      #execution:
        #isolation:
          #thread:
            #timeoutInMilliseconds: 10000
          #semaphore:
            #maxConcurrentRequests: 20
endpoints:
  restart:
    enabled: true
  shutdown:
    enabled: true
  health:
    sensitive: false
#
zuul:  
  host:
    connect-timeout-millis: 180000
    socket-timeout-millis: 180000
  sensitiveHeaders:
  #ignored-services: '*'
  #ignoredPatterns: /**/api/**
  routes:
    config-general:
      path: /configg/**
      serviceId: config-general
      #url: http://192.168.109.26:8083
    flight-control:
      path: /flightc/**
      serviceId: flight-control
      #url: http://192.168.109.26:8081
    #complete-air: /complui/**
    fare-control:
      path: /farec/**
      serviceId: fare-control
      #url: http://192.168.109.26:8085
    mrn:
      path: /mrn/**
      serviceId: mrn
      #url: http://192.168.109.32:8086
    pnr:
      path: /pnr/**
      serviceId: pnr
      #url: http://192.168.109.32:8087
    sales:
      path: /sales/**
      serviceId: sales
      #url: http://192.168.109.26:8088
    cargo-control:
      path: /cargo/**
      serviceId: cargo-control
      #url: http://192.168.109.31:8090
    finance:
      path: /finance/**
      serviceId: finance
      #url: http://192.168.109.32:8089
    oauth-service:
      #sensitiveHeaders:
      path: /oauth/**
      serviceId: oauth-service
      #stripPrefix: false	  
      #url: http://192.168.109.23:9999
    kjar-service:
      path: /kjar/**
      serviceId: kjar-service
      #url: http://192.168.109.34:8090
    report-transoft:
      path: /report/**
      serviceId: report-transoft
  addProxyHeaders: true
#
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 60000
hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests: 20
hystrix.command.default.execution.timeout.enabled: false
ribbon:
  ConnectTimeout: 180000
  ReadTimeout: 180000
mrn:
  ribbon:
    ReadTimeout: 60000
    ConnectTimeout: 60000
pnr:
  ribbon:
    ReadTimeout: 60000
    ConnectTimeout: 60000
sales:
  ribbon:
    ReadTimeout: 60000
    ConnectTimeout: 60000
# Define the Eureka server that handles service registration
eureka:
  client:
    serviceUrl:
      defaultZone: http://eureka.train.air.c.transoft.bo:8761/eureka/  #192.168.109.23
  instance:
    metadataMap:
      instanceId: ${spring.application.name}:${server.port}

security:
  basic:
    enabled: false
  oauth2:
    resource:
      userInfoUri: http://oauth.train.air.c.transoft.bo:9999/uaa/api/user #192.168.109.23
